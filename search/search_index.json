{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mdminify","text":"<p>A Python tool for minifying and restoring markdown files by stripping unnecessary elements and reformatting content</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>License</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install mdminify\n</code></pre>"},{"location":"#license","title":"License","text":"<p><code>mdminify</code> is distributed under the terms of the MIT license.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#010-2024-09-27","title":"[0.1.0] - 2024-09-27","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"cli/","title":"CLI","text":""},{"location":"cli/#mdminify.cli.cli","title":"<code>cli()</code>","text":"<p>CLI tool to remove and restore markdown links.</p> Source code in <code>src/mdminify/cli.py</code> <pre><code>@click.group()\ndef cli():\n    \"\"\"CLI tool to remove and restore markdown links.\"\"\"\n</code></pre>"},{"location":"cli/#mdminify.cli.remove","title":"<code>remove(input_md_file, output_md_file, output_json_file)</code>","text":"<p>Removes markdown links from the input file and saves the plain text (without links) to the output markdown file, while storing the extracted links in a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>input_md_file</code> <code>str</code> <p>Path to the markdown file that contains links.</p> required <code>output_md_file</code> <code>str</code> <p>Path where the processed markdown (without links) will be saved.</p> required <code>output_json_file</code> <code>str</code> <p>Path where the extracted links (as JSON) will be stored.</p> required Side Effects <ul> <li>Creates or overwrites the output markdown file with the plain text (links removed).</li> <li>Creates or overwrites the JSON file with the extracted links.</li> </ul> Example <p>$ mdminify remove input.md output.md links.json</p> <p>This will process <code>input.md</code>, save the plain text (without links) to <code>output.md</code>, and store the extracted links in <code>links.json</code>.</p> Source code in <code>src/mdminify/cli.py</code> <pre><code>@click.command()\n@click.argument(\"input_md_file\", type=click.Path(exists=True))\n@click.argument(\"output_md_file\", type=click.Path())\n@click.argument(\"output_json_file\", type=click.Path())\ndef remove(input_md_file, output_md_file, output_json_file):\n    \"\"\"\n    Removes markdown links from the input file and saves the plain text (without links)\n    to the output markdown file, while storing the extracted links in a JSON file.\n\n    Args:\n        input_md_file (str): Path to the markdown file that contains links.\n        output_md_file (str): Path where the processed markdown (without links) will be saved.\n        output_json_file (str): Path where the extracted links (as JSON) will be stored.\n\n    Side Effects:\n        - Creates or overwrites the output markdown file with the plain text (links removed).\n        - Creates or overwrites the JSON file with the extracted links.\n\n    Example:\n        $ mdminify remove input.md output.md links.json\n\n    This will process `input.md`, save the plain text (without links) to `output.md`,\n    and store the extracted links in `links.json`.\n    \"\"\"\n    process_markdown_file(input_md_file, output_md_file, output_json_file)\n    click.echo(f\"Processed markdown saved to {output_md_file}, links saved to {output_json_file}\")\n</code></pre>"},{"location":"cli/#mdminify.cli.restore","title":"<code>restore(plain_md_file, json_file, output_md_file)</code>","text":"<p>Restores markdown links in the plain markdown file using the stored links from the JSON file, and saves the result to a new markdown file.</p> <p>Parameters:</p> Name Type Description Default <code>plain_md_file</code> <code>str</code> <p>Path to the plain markdown file (without links).</p> required <code>json_file</code> <code>str</code> <p>Path to the JSON file that contains the extracted links.</p> required <code>output_md_file</code> <code>str</code> <p>Path where the markdown file with restored links will be saved.</p> required Side Effects <ul> <li>Creates or overwrites the output markdown file with the restored markdown (links reinserted).</li> </ul> Example <p>$ mdminify restore output.md links.json restored.md</p> <p>This will restore links in <code>output.md</code> using <code>links.json</code>, and save the result to <code>restored.md</code>.</p> Source code in <code>src/mdminify/cli.py</code> <pre><code>@click.command()\n@click.argument(\"plain_md_file\", type=click.Path(exists=True))\n@click.argument(\"json_file\", type=click.Path(exists=True))\n@click.argument(\"output_md_file\", type=click.Path())\ndef restore(plain_md_file, json_file, output_md_file):\n    \"\"\"\n    Restores markdown links in the plain markdown file using the stored links\n    from the JSON file, and saves the result to a new markdown file.\n\n    Args:\n        plain_md_file (str): Path to the plain markdown file (without links).\n        json_file (str): Path to the JSON file that contains the extracted links.\n        output_md_file (str): Path where the markdown file with restored links will be saved.\n\n    Side Effects:\n        - Creates or overwrites the output markdown file with the restored markdown (links reinserted).\n\n    Example:\n        $ mdminify restore output.md links.json restored.md\n\n    This will restore links in `output.md` using `links.json`, and save the result to `restored.md`.\n    \"\"\"\n    restore_links_from_json(plain_md_file, json_file, output_md_file)\n    click.echo(f\"Restored markdown with links saved to {output_md_file}\")\n</code></pre>"},{"location":"mdminify/","title":"MDminify","text":""},{"location":"mdminify/#mdminify.mdminify.process_markdown_file","title":"<code>process_markdown_file(input_md_file, output_md_file, output_json_file)</code>","text":"<p>Reads a markdown file, removes links, saves the plain text to another file, and stores the links in a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>input_md_file</code> <code>str</code> <p>Path to the input markdown file that contains links.</p> required <code>output_md_file</code> <code>str</code> <p>Path to the output markdown file where plain text (without links) will be saved.</p> required <code>output_json_file</code> <code>str</code> <p>Path to the JSON file where extracted links will be stored.</p> required Example <p>process_markdown_file(\"input.md\", \"output.md\", \"links.json\")</p> Source code in <code>src/mdminify/mdminify.py</code> <pre><code>def process_markdown_file(input_md_file: str, output_md_file: str, output_json_file: str) -&gt; None:\n    \"\"\"\n    Reads a markdown file, removes links, saves the plain text to another file,\n    and stores the links in a JSON file.\n\n    Args:\n        input_md_file (str): Path to the input markdown file that contains links.\n        output_md_file (str): Path to the output markdown file where plain text (without links) will be saved.\n        output_json_file (str): Path to the JSON file where extracted links will be stored.\n\n    Example:\n        &gt;&gt;&gt; process_markdown_file(\"input.md\", \"output.md\", \"links.json\")\n        # output.md will contain the plain text, and links.json will store the links in JSON format.\n    \"\"\"\n    # Read markdown content from input file\n    with open(input_md_file) as file:\n        markdown_text = file.read()\n\n    # Remove links from the markdown content\n    plain_text, links = remove_links(markdown_text)\n\n    # Save plain text to output markdown file\n    with open(output_md_file, \"w\") as file:\n        file.write(plain_text)\n\n    # Save links to a JSON file\n    with open(output_json_file, \"w\") as file:\n        json.dump(links, file, indent=4)\n</code></pre>"},{"location":"mdminify/#mdminify.mdminify.process_markdown_file--outputmd-will-contain-the-plain-text-and-linksjson-will-store-the-links-in-json-format","title":"output.md will contain the plain text, and links.json will store the links in JSON format.","text":""},{"location":"mdminify/#mdminify.mdminify.reinsert_links","title":"<code>reinsert_links(plain_text, links)</code>","text":"<p>Reinserts markdown links into plain text using a dictionary that maps the link text to URLs.</p> <p>Parameters:</p> Name Type Description Default <code>plain_text</code> <code>str</code> <p>The input plain text without links.</p> required <code>links</code> <code>dict</code> <p>A dictionary mapping the link text (str) to its corresponding URL (str).</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The text with links reinserted in markdown format.</p> Example <p>reinsert_links( ...     \"I am proficient in Python.\", {\"Python\": \"https://www.python.org/\"} ... ) \"I am proficient in Python.\"</p> Source code in <code>src/mdminify/mdminify.py</code> <pre><code>def reinsert_links(plain_text: str, links: dict[str, str]) -&gt; str:\n    \"\"\"\n    Reinserts markdown links into plain text using a dictionary that maps the link text to URLs.\n\n    Args:\n        plain_text (str): The input plain text without links.\n        links (dict): A dictionary mapping the link text (str) to its corresponding URL (str).\n\n    Returns:\n        str: The text with links reinserted in markdown format.\n\n    Example:\n        &gt;&gt;&gt; reinsert_links(\n        ...     \"I am proficient in Python.\", {\"Python\": \"https://www.python.org/\"}\n        ... )\n        \"I am proficient in [Python](https://www.python.org/).\"\n    \"\"\"\n    for text, url in links.items():\n        # Replace the plain text with markdown-style link\n        plain_text = plain_text.replace(text, f\"[{text}]({url})\")\n    return plain_text\n</code></pre>"},{"location":"mdminify/#mdminify.mdminify.remove_links","title":"<code>remove_links(markdown_text)</code>","text":"<p>Removes markdown links from a string and returns the plain text and a dictionary mapping link text to their respective URLs.</p> <p>Parameters:</p> Name Type Description Default <code>markdown_text</code> <code>str</code> <p>The input markdown text that may contain links in the form text.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[str, dict[str, str]]</code> <p>A tuple containing: - plain_text (str): The markdown text with links removed. - links (dict): A dictionary mapping the link text (str) to its corresponding URL (str).</p> Example <p>remove_links(\"I am proficient in Python.\") (\"I am proficient in Python.\", {\"Python\": \"https://www.python.org/\"})</p> Source code in <code>src/mdminify/mdminify.py</code> <pre><code>def remove_links(markdown_text: str) -&gt; tuple[str, dict[str, str]]:\n    \"\"\"\n    Removes markdown links from a string and returns the plain text and a dictionary\n    mapping link text to their respective URLs.\n\n    Args:\n        markdown_text (str): The input markdown text that may contain links in the form [text](url).\n\n    Returns:\n        tuple: A tuple containing:\n            - plain_text (str): The markdown text with links removed.\n            - links (dict): A dictionary mapping the link text (str) to its corresponding URL (str).\n\n    Example:\n        &gt;&gt;&gt; remove_links(\"I am proficient in [Python](https://www.python.org/).\")\n        (\"I am proficient in Python.\", {\"Python\": \"https://www.python.org/\"})\n    \"\"\"\n    # Regex pattern to find [text](url)\n    link_pattern = re.compile(r\"\\[(.*?)\\]\\((.*?)\\)\")\n    # Dictionary to store text-to-url mappings\n    links: dict[str, str] = {}\n\n    # Function to replace the links and store the mappings\n    def replace_link(match: re.Match) -&gt; str:\n        text, url = match.groups()\n        links[text] = url  # Store the mapping of text -&gt; url\n        return text  # Return just the plain text\n\n    # Replace all markdown links with plain text\n    plain_text = link_pattern.sub(replace_link, markdown_text)\n    return plain_text, links\n</code></pre>"},{"location":"mdminify/#mdminify.mdminify.restore_links_from_json","title":"<code>restore_links_from_json(plain_md_file, json_file, output_md_file)</code>","text":"<p>Reads a plain markdown file and a JSON file containing links, then restores the links in the markdown file and saves the result.</p> <p>Parameters:</p> Name Type Description Default <code>plain_md_file</code> <code>str</code> <p>Path to the plain markdown file (without links).</p> required <code>json_file</code> <code>str</code> <p>Path to the JSON file that contains the links as a dictionary.</p> required <code>output_md_file</code> <code>str</code> <p>Path to the output markdown file where the restored markdown will be saved.</p> required Example <p>restore_links_from_json(\"output.md\", \"links.json\", \"restored.md\")</p> Source code in <code>src/mdminify/mdminify.py</code> <pre><code>def restore_links_from_json(plain_md_file: str, json_file: str, output_md_file: str) -&gt; None:\n    \"\"\"\n    Reads a plain markdown file and a JSON file containing links, then restores the links\n    in the markdown file and saves the result.\n\n    Args:\n        plain_md_file (str): Path to the plain markdown file (without links).\n        json_file (str): Path to the JSON file that contains the links as a dictionary.\n        output_md_file (str): Path to the output markdown file where the restored markdown will be saved.\n\n    Example:\n        &gt;&gt;&gt; restore_links_from_json(\"output.md\", \"links.json\", \"restored.md\")\n        # restored.md will contain the markdown text with links restored.\n    \"\"\"\n    # Read plain text from markdown file\n    with open(plain_md_file) as file:\n        plain_text = file.read()\n\n    # Load links from JSON file\n    with open(json_file) as file:\n        links: dict[str, str] = json.load(file)\n\n    # Reinsert the links into the plain text\n    restored_text = reinsert_links(plain_text, links)\n\n    # Save the restored markdown content to output file\n    with open(output_md_file, \"w\") as file:\n        file.write(restored_text)\n</code></pre>"},{"location":"mdminify/#mdminify.mdminify.restore_links_from_json--restoredmd-will-contain-the-markdown-text-with-links-restored","title":"restored.md will contain the markdown text with links restored.","text":""}]}